[{"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/index.js":"1","/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/App.js":"2","/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/reportWebVitals.js":"3","/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/server.js":"4","/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/Header.js":"5","/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/Content.js":"6","/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/AddTask.js":"7","/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/context.js":"8"},{"size":500,"mtime":1621947046000,"results":"9","hashOfConfig":"10"},{"size":3384,"mtime":1626289742319,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1621947046000,"results":"12","hashOfConfig":"10"},{"size":3231,"mtime":1626289629753,"results":"13","hashOfConfig":"10"},{"size":1531,"mtime":1621954645000,"results":"14","hashOfConfig":"10"},{"size":7604,"mtime":1626324908643,"results":"15","hashOfConfig":"10"},{"size":4683,"mtime":1626323994748,"results":"16","hashOfConfig":"10"},{"size":104,"mtime":1626020611790,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1v57yb6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/index.js",[],["38","39"],"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/App.js",[],"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/reportWebVitals.js",[],"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/server.js",[],"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/Header.js",["40"],"import React from 'react';\nimport {Card,CardHeader, CardContent,TextField, CardActions, Button, Grid }from \"@material-ui/core\";\n\n\nconst Header = () => {\n    return (\n     <Grid>\n        <Card>\n           \n          <CardContent>\n              <header>\n                  <h1>To Do List</h1>\n              </header>\n            <Grid>\n            <div>\n              <TextField\n                // required\n                // label=\"Username\"\n                // value={username}\n                // onChange={(event) => setUserName(event.target.value)}\n              ></TextField>\n            </div>\n            <div>\n              <TextField\n                // required\n                // InputProps={{\n                //   required: true,\n                // }}                \n                // label=\"Password\"\n                // value={password}\n                // onChange={(event) => setPassword(event.target.value)}\n              ></TextField>\n            </div>\n            </Grid>\n            <form >\n            <input  type=\"text\"  placeholder=\"Enter task...\"/>\n            <button>Submit</button>\n        </form>\n          </CardContent>\n          <CardActions>\n            <div>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                // onClick={(event) => authenticate(event)}\n              >\n                Log in\n              </Button>\n            </div>\n          </CardActions>\n          \n        </Card>\n        </Grid>\n        \n    );\n};\n\nexport default Header;",["41","42"],"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/Content.js",["43","44"],"import React, {useEffect, useContext} from 'react';\nimport ToDoContext from './context';\nimport { makeStyles } from '@material-ui/styles';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport {Button, Grid, Table, TableBody, TableCell, TableRow,TableHead,Snackbar\n  ,FormControl, Paper,FormHelperText, Dialog,FormControlLabel, Switch,TextField,IconButton,Select,MenuItem } from '@material-ui/core';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport AddTask from \"./AddTask\";\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    width: 1000,\n    textAlign: 'center',\n    borderRadius: '10pt 10pt 4pt 4pt' \n },\n  header:{\n    backgroundColor: '#ffffff',\n    boxShadow: '0px 3px 6px #00000029',\n    padding: '20px 24px 15px',\n    fontWeight: '600', \n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderRadius: '10px 10px 0px 0px'\n  },\n  helperText:{\n    marginTop:\"-62px\"\n  },\n  font:{\n    fontWeight:'600'\n  },\n  button: {\n    minWidth: \"150px\",\n    fontWeight: 600,\n    border: 2,\n    boxShadow: '0px 3px 6px #00000029',\n    borderRadius: '6px',\n    margin: \"21px\"\n  },\n}));\n\nconst Content =  () => {\n  const [open, setOpen] = React.useState(false);\n  const {todoContext, state} = useContext(ToDoContext)\n  useEffect( () => {\n    \n      fetch(\"api/todos\", {\n        headers : { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n         }})\n        .then((response) => response.json())\n        .then((json) => todoContext.listTodo(json.todos)) \n  }, [state.isLoading])\n\n  useEffect( () => {\n    fetch(\"api/users\", {\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }})\n      .then((response) => response.json())\n      .then((json) => todoContext.listUser(json.users))\n  },[] )\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSelectUser = (e) => {\n    todoContext.setSelectedUser(e.target.value)\n  }\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n\n  const statusHandler = (e) => {\n    if (e.target.checked === true){\n      todoContext.statusTodo(true)\n    }\n    else {\n      todoContext.statusTodo(false)\n    } \n    // todoContext.statusTodo(e.target.value)\n  }\n\n  const classes = useStyles();   \n  \n\n\n  const lsp = Object.values(state.todosFcontext);\n  console.log(\"list\",lsp)\nreturn (\n<div>\n<Grid>\n  <Paper className={classes.paper}> \n    <div className={classes.header}>\n          <span>List</span>\n    </div>\n    <Grid container spacing={2} style={{ margin: \"25px\"}}>\n       <Grid item xs={4}>\n        <FormControl>\n                  <TextField\n                      // label=\"Project Name\" \n                      variant=\"outlined\"\n                      value={state.editFcontext.name}\n                      fullWidth\n                      size= \"small\" /> \n                      <FormHelperText className={classes.helperText}>Project Name</FormHelperText>    \n        </FormControl>\n        </Grid>\n        <Grid item xs={4}>\n            {/* <Autocomplete\n                    id=\"user-field\"\n                    value={state.editFcontext.userId}\n                    // freeSolo\n                    // options={state.userFcontext.map((user,key) => user.firstName + user.lastName ) }\n                    options={state.userFcontext}\n                     getOptionLabel={(option) => option.firstName + option.lastName}\n                    renderInput={(params) => (\n                      <TextField {...params} \n                          label=\"User\" \n                          variant=\"outlined\"\n                          \n                          fullWidth\n                          size= \"small\" />\n                    )}\n                  /> */}\n                          \n\n                  <Select\n                    labelId=\"user-field\"\n                    id=\"demo-simple-select\"\n                    value={state.selectedUser}\n                    onChange={handleSelectUser}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    fullWidth\n                    style={{ height: 38}}\n                  >\n                    \n                   {state.userFcontext.map((user,key) => \n                   <MenuItem style={{width:\"none\"}} value={user.id}>{user.firstName + user.lastName}</MenuItem> ) }\n                  </Select>\n                  <FormHelperText className={classes.helperText}>User</FormHelperText>\n                  </Grid>\n                  <Grid item xs={4}>\n                              <FormControlLabel\n                                          value=\"true\"\n                                          size= \"small\" \n                                          control={<Switch \n                                          onChange={statusHandler}\n                                          checked={state.statusFcontext}\n                                          color=\"primary\" />}\n                                />\n                              <FormHelperText className={classes.helperText} style={{marginLeft: \"114px\"}}>Completed</FormHelperText>      \n                              </Grid>\n                              {/* <p>{state.statusFcontext ? \"true\" : \"false\"}</p> */}\n    </Grid>\n    <Paper style={{margin:\"85px 25px 22px\", border: \"1px solid black\"}}>\n        <Table>\n            <TableHead>\n              <TableRow >\n                <TableCell className={classes.font}>Name </TableCell>\n                <TableCell className={classes.font}>User</TableCell>\n                <TableCell className={classes.font}>completed</TableCell>\n                <TableCell className={classes.font}>Action</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {lsp.map(row =>\n                      <TableRow >\n                        <TableCell>{row.name} </TableCell>\n                        <TableCell>{row.user} </TableCell>\n                        <TableCell align='center'>{(row.isComplete === true) ? <CheckCircleOutlineIcon/> : <HighlightOffIcon/> }</TableCell>\n                        <TableCell><IconButton onClick={()=>todoContext.deleteTodo(row.id)}><CancelIcon/></IconButton><IconButton  onClick={()=>todoContext.editTodo(row.id)}><EditIcon/></IconButton></TableCell> \n                      </TableRow>\n              )}  \n            </TableBody>\n          </Table>\n  \n    </Paper>\n    <Grid container\n          direction=\"row\"\n          justify=\"flex-end\"\n          alignItems=\"flex-end\">\n      <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleClickOpen}\n      >\n          Add Task\n      </Button>\n      </Grid>\n          \n  </Paper> \n  <Snackbar open={state.deleteFcontext} autoHideDuration={6000} onClose={todoContext.closeDeleteSnackbar}>\n        <Alert onClose={todoContext.closeDeleteSnackbar} severity=\"success\">\n          This list has been deleted !!\n        </Alert>\n      </Snackbar>\n  <Dialog aria-labelledby=\"max-width-dialog-title\" open={open}\n              style={{ backgroundColor: '#aef1eb54' }}\n              PaperProps={{ classes: { root: classes.dialog } }}\n              // onClose={handleClose}\n        >\n          <AddTask handleClose={handleClose}/>\n      </Dialog>  \n  </Grid>\n</div>\n);\n}\nexport default Content;","/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/AddTask.js",[],"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/context.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":14,"nodeType":"51","messageId":"52","endLine":2,"endColumn":24},{"ruleId":"45","replacedBy":"53"},{"ruleId":"47","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":57,"column":6,"nodeType":"57","endLine":57,"endColumn":23,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"56","line":67,"column":5,"nodeType":"57","endLine":67,"endColumn":7,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'CardHeader' is defined but never used.","Identifier","unusedVar",["60"],["61"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'todoContext'. Either include it or remove the dependency array.","ArrayExpression",["62"],["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [state.isLoading, todoContext]",{"range":"68","text":"69"},"Update the dependencies array to be: [todoContext]",{"range":"70","text":"71"},[1729,1746],"[state.isLoading, todoContext]",[2009,2011],"[todoContext]"]