[{"/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/index.js":"1","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/reportWebVitals.js":"2","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/App.js":"3","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/server.js":"4","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/Header.js":"5","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/Content.js":"6","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/AddTask.js":"7"},{"size":500,"mtime":1621947046000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1621947046000,"results":"10","hashOfConfig":"9"},{"size":1079,"mtime":1625640452576,"results":"11","hashOfConfig":"9"},{"size":3263,"mtime":1622008771000,"results":"12","hashOfConfig":"9"},{"size":1531,"mtime":1621954645000,"results":"13","hashOfConfig":"9"},{"size":6882,"mtime":1625644098094,"results":"14","hashOfConfig":"9"},{"size":4832,"mtime":1625642033571,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1db9yda",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/index.js",[],["36","37"],"/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/reportWebVitals.js",[],"/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/App.js",["38","39","40","41","42","43"],"import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css'\nimport Header from \"./Header\";\nimport Content from \"./Content\";\nimport server from \"./server.js\";\n\nfunction App() {\n  const [todos,setTodos] = React.useState([])\n  const [todo,setTodo] = React.useState(\"\")\n\n  useEffect(() => {\n    fetch(\"api/todos\", {\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }})\n      .then((response) => response.json())\n      .then((json) => setTodos(json))\n  }, [])\n\n  // useEffect(() => {\n  //   fetch(\"api/users\" , {\n  //     headers : { \n  //       'Content-Type': 'application/json',\n  //       'Accept': 'application/json'\n  //      }\n  //   })\n  //     .then((result) => result.json())\n  //     .then((resp) => {\n  //       // console.warn(resp)\n  //       setTodo(resp)\n  //     })\n  //   }\n  // )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Content todos={todos} setTodos={setTodos} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/server.js",["44"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeServer = void 0;\nvar miragejs_1 = require(\"miragejs\");\nvar faker = require(\"faker\");\nfunction makeServer() {\n    var server = new miragejs_1.Server({\n        serializers: {\n            // application: JSONAPISerializer.extend({\n            //     alwaysIncludeLinkageData: false\n            // }),\n            todo: miragejs_1.RestSerializer.extend({\n                serializeIds: \"always\",\n            })\n            // users: RestSerializer.extend({\n            //     include:[\"todo\"],\n            //     embed: true\n            // })\n        },\n        models: {\n            todo: miragejs_1.Model.extend({\n                user: miragejs_1.belongsTo()\n            }),\n            user: miragejs_1.Model.extend({\n                todos: miragejs_1.hasMany()\n            })\n        },\n        factories: {\n            user: miragejs_1.Factory.extend({\n                id: function (i) {\n                    return Number(i + 1);\n                },\n                firstName: function () {\n                    return faker.name.firstName();\n                },\n                lastName: function () {\n                    return faker.name.lastName();\n                }\n            }),\n            todo: miragejs_1.Factory.extend({\n                name: function () {\n                    return faker.random.words(faker.random.number(4) + 1);\n                },\n                isComplete: false\n            })\n        },\n        seeds: function (server) {\n            var users = server.createList(\"user\", 5);\n            for (var _i = 0, users_1 = users; _i < users_1.length; _i++) {\n                var user = users_1[_i];\n                server.createList(\"todo\", faker.random.number(4), { user: user });\n            }\n        },\n        routes: function () {\n            this.namespace = \"api\";\n            this.get(\"/users\", function (schema) {\n                return schema.users.all();\n            });\n            this.get(\"/user/:id/todos\", function (schema, request) {\n                var userID = request.params.id;\n                var todos = schema.todos.where({ userID: userID });\n                return {\n                    todos: todos\n                };\n            });\n            // todo apis\n            this.get(\"/todos\", function (schema, request) {\n                var active = request.params.active;\n                console.log(active);\n                return schema.todos.all();\n            });\n            this.get(\"/todo/:id\", function (schema, request) {\n                var todoId = request.params.id;\n                var todo = schema.todos.find(todoId);\n                return {\n                    todo: todo\n                };\n            });\n            this.delete(\"/todo/:id/delete\", function (schema, request) {\n                var todoId = request.params.id;\n                schema.todos.find(todoId).destroy();\n                return { success: true };\n            });\n            this.post(\"/todo/create\", function (schema, request) {\n                var attrs = JSON.parse(request.requestBody);\n                return schema.todos.create(attrs);\n            });\n        }\n    });\n    return server;\n}\nexports.makeServer = makeServer;\n","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/Header.js",["45"],"import React from 'react';\nimport {Card,CardHeader, CardContent,TextField, CardActions, Button, Grid }from \"@material-ui/core\";\n\n\nconst Header = () => {\n    return (\n     <Grid>\n        <Card>\n           \n          <CardContent>\n              <header>\n                  <h1>To Do List</h1>\n              </header>\n            <Grid>\n            <div>\n              <TextField\n                // required\n                // label=\"Username\"\n                // value={username}\n                // onChange={(event) => setUserName(event.target.value)}\n              ></TextField>\n            </div>\n            <div>\n              <TextField\n                // required\n                // InputProps={{\n                //   required: true,\n                // }}                \n                // label=\"Password\"\n                // value={password}\n                // onChange={(event) => setPassword(event.target.value)}\n              ></TextField>\n            </div>\n            </Grid>\n            <form >\n            <input  type=\"text\"  placeholder=\"Enter task...\"/>\n            <button>Submit</button>\n        </form>\n          </CardContent>\n          <CardActions>\n            <div>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                // onClick={(event) => authenticate(event)}\n              >\n                Log in\n              </Button>\n            </div>\n          </CardActions>\n          \n        </Card>\n        </Grid>\n        \n    );\n};\n\nexport default Header;","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/Content.js",["46"],"// import React from 'react';\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport {Button, Grid, Typography, List, ListItem, Paper,FormHelperText, Dialog,FormControlLabel, Switch,TextField,IconButton } from '@material-ui/core';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport AddTask from \"./AddTask\";\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    width: 1000,\n    textAlign: 'center',\n    borderRadius: '10pt 10pt 4pt 4pt' \n },\n  header:{\n    backgroundColor: '#ffffff',\n    boxShadow: '0px 3px 6px #00000029',\n    padding: '20px 24px 15px',\n    fontWeight: '600', \n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderRadius: '10px 10px 0px 0px'\n  },\n  // grids:{\n  //   lineHeight: 2\n  // },\n  helperText:{\n    marginTop:\"-62px\"\n  },\n  button: {\n    minWidth: \"150px\",\n    fontWeight: 600,\n    border: 2,\n    boxShadow: '0px 3px 6px #00000029',\n    borderRadius: '6px',\n    margin: \"21px\"\n  },\n}));\n\nconst Content = ({todos, setTodos}) => {\n  console.log(todos);\n  const [open, setOpen] = React.useState(false);\n  //  const [ todos, setTodos] = useState([]);\n  const classes = useStyles();\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleFilter = () => {\n    let filtered = todos.filter(task => {\n      return !task.complete;\n    });\n    setTodos(filtered);\n  }\n  function deleteUser()\n  {\n    fetch(\"api/todo/:id/delete\",\n    {\n      method:'DELETE'\n    }).then((result)=>{\n      result.json().then((resp)=>{\n        console.warn(resp)\n      })\n    })\n  }\n  return (\n     <Grid>\n          <Paper className={classes.paper}> \n                <div className={classes.header}>\n                  <span>List</span>\n                </div>\n                <Grid container spacing={2} style={{ margin: \"25px\"}}>\n                    <Grid item xs={6}>\n                                <TextField id=\"outlined-basic\"\n                                fullWidth\n                                size= \"small\"\n                                // value= {todos}\n                                variant=\"outlined\" />  \n                                <FormHelperText className={classes.helperText}>Project Name</FormHelperText>     \n                    </Grid> \n\n                    <Grid item xs={3}>\n                    <TextField\n                                id=\"standard-select-currency-native\"\n                                select\n                                fullWidth\n                                size= \"small\"\n                                labelPlacement=\"top\"\n                                variant=\"outlined\"\n                                SelectProps={{\n                                    native: true,\n                                }}\n                                >\n                                {todos.map((todo) => (\n                                    <div key={todo.value} value={todo.value}>\n                                    </div>\n                                ))}\n                            </TextField>\n                            <FormHelperText className={classes.helperText}>User</FormHelperText>\n                    </Grid>\n                    <Grid item xs={3}>\n                    <FormControlLabel\n                                value=\"completed\"\n                                size= \"small\"\n                                control={<Switch color=\"primary\" />}\n                                />\n                    <FormHelperText className={classes.helperText}>Completed</FormHelperText>      \n                    </Grid>\n                </Grid>\n\n              <Paper style={{margin:\"85px 25px 22px\", border: \"1px solid black\"}}>\n              <List component=\"nav\" aria-label=\"Locations\">\n                <ListItem>\n                    <Grid item container direction=\"row\"\n                              justify=\"space-between\"\n                              alignItems=\"center\">\n                          <Grid item xs={3}>\n                            <Typography>Name</Typography>\n                            {todos.map((todo) => <div>{todo.text}</div>\n\n                                )}\n                          </Grid>\n                          <Grid item  xs={3}>\n                            <Typography>User</Typography>\n                          </Grid>\n                          <Grid item xs={3}>\n                            <Typography>Completed</Typography>\n                          </Grid>\n                          <Grid item  xs={3}>\n                            <Typography>Actions</Typography>\n                          </Grid>\n                    </Grid>\n                  </ListItem>\n                  \n                  <ListItem>\n                    <Grid container item >\n                      <Grid item direction=\"column\" xs={3}>\n                        <Grid item className={classes.grids}>\n                        </Grid>\n                      </Grid>\n                      <Grid item direction=\"column\" xs={3}>\n                        <Grid item className={classes.grids}>\n                        </Grid>\n                      </Grid>\n                      <Grid item  direction=\"column\" justify=\"center\" xs={3}>\n                        <Grid item className={classes.grids}>\n                          <IconButton onClick={()=>deleteUser()}><CheckCircleOutlineIcon/></IconButton>\n                          \n                        </Grid>\n                      </Grid>\n                      <Grid item  direction=\"column\" justify=\"center\" xs={3}>\n                        <Grid item className={classes.grids}>\n                            <IconButton onClick={handleFilter}><CancelIcon/></IconButton>\n                            <IconButton><EditIcon/></IconButton> \n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </ListItem>\n              </List>\n        </Paper>\n        <Grid  container\n                direction=\"row\"\n                justify=\"flex-end\"\n                alignItems=\"flex-end\">\n            <Button\n                className={classes.button}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleClickOpen}\n            >\n                Add Task\n            </Button>\n          </Grid>\n\t\t\t</Paper>  \n      <Dialog aria-labelledby=\"max-width-dialog-title\" open={open}\n              style={{ backgroundColor: '#aef1eb54' }}\n              PaperProps={{ classes: { root: classes.dialog } }}\n              // onClose={handleClose}\n        >\n          <AddTask todos={todos} setTodos={setTodos} handleClose={handleClose}/>\n      </Dialog> \n\t\t  </Grid>\n  );\n};\n\nexport default Content;\n","/Users/rafnaali/Desktop/BlueSky-project/BlueSky-project/src/AddTask.js",["47"],"// import React from 'react';\nimport React, { useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { TextField, FormControl, colors,FormHelperText, Grid, List, ListItem, Paper, Button, Switch} from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst useStyles = makeStyles(theme => ({ \npaper: {\n    width:'500px',\n    textAlign: 'center',\n    borderRadius: '10pt 10pt 4pt 4pt' \n },\nheader:{\n    backgroundColor: '#ffffff',\n    boxShadow: '0px 3px 6px #00000029',\n    padding: '20px 24px 15px',\n    // border: '1px solid #eeeeee',\n    fontWeight: '600', \n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderRadius: '10px 10px 0px 0px'\n  },\ngrids:{\n    padding: '0px 7px 0px 0',\n    lineHeight: 2\n  },\nbutton: {\n    minWidth: \"150px\",\n    fontWeight: 600,\n    border: 2,\n    boxShadow: '0px 3px 6px #00000029',\n    borderRadius: '6px',\n    margin: \"33px\"\n  },\nhelperText:{\n    marginTop:\"-65px\"\n  },  \nselectForm: {\n    width: '100%'\n  },\ngridField: {\n    margin: '15px',\n  },\n  \n}));\n\nconst AddTask = ({todos, setTodos, handleClose} ) => {\n  // const [addTasks, setAddTasks] = useState([])\n  // const [ taskInput, setTaskInput ] = useState('');\n  const [inputText, setInputText] = useState(\"\");\n  const classes = useStyles();\n  \n  // const addTask = (taskInput ) => {\n  //   let copy = [...taskList];\n  //   copy = [...copy, { id: taskList.length + 1, task: taskInput, complete: false }];\n  //   setAddTasks(copy);\n  // }\n\n\n  useEffect(() => {\n    fetch(\n      (\"api/todo/create\"),\n    {\n      method: 'POST',\n    }\n    )\n      .then((response) => response.json())\n  //     .then((json) => setAddTasks(json))\n  }, [])\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     //  addTask(taskInput);\n//     setTaskInput(\"\");\n// }\n\nconst inputTextHandler = (e) => {\n   console.log(e.target.value)\n   setInputText(e.target.value);\n};\n\nconst submitTodoHandler = (e) => {\n  e.preventDefault();\n  setTodos([\n      ...todos,\n      {text: inputText, completed: false, id: Math.random() * 1000}\n  ]);\n  setInputText(\" \");\n  handleClose();\n}\n\n  return (\n    <Grid> \n      <Paper  className={classes.paper}>\n      <div className={classes.header}>\n            <span>Add Task</span>\n            </div>\n          <List>\n            <ListItem>\n                <Grid container >\n                    <Grid item xs={12} className={classes.gridField}>\n                        <FormControl className={classes.selectForm}>\n                          <TextField id=\"outlined-basic\"\n                            size=\"small\" \n                             value={inputText}\n                            onChange={inputTextHandler}\n                            variant=\"outlined\" />\n                        </FormControl>\n                        <FormHelperText className={classes.helperText}>Project Name</FormHelperText>\n                    </Grid>                \n                </Grid> \n            </ListItem>\n            <ListItem> \n            {/* <Grid item xs={12} md={6} className={classes.gridField} style={{marginTop:\"77px\"}}>\n                  <FormControl className={classes.selectForm}>\n                  <TextField\n                        id=\"user\"\n                        select\n                        size=\"small\"\n                        labelPlacement=\"top\"\n                        variant=\"outlined\"\n                        SelectProps={{\n                            native: true,\n                        }}\n                        > */}\n                        {/* {user.map((option) => (\n                            <option key={option.value} value={option.value}>\n                            </option>\n                        ))} */}\n                    {/* </TextField>\n                  </FormControl>\n                  <FormHelperText className={classes.helperText}>User</FormHelperText>\n            </Grid> */}\n            <Grid item xs={3} style={{marginTop:\"90px\"}}>\n                    <FormControlLabel\n                                value=\"completed\"\n                                size= \"small\"\n                                control={<Switch color=\"primary\" />}\n                                />\n                    <FormHelperText className={classes.helperText}>Completed</FormHelperText>      \n                    </Grid>\n            </ListItem>\n          </List> \n          <div>\n              <Button\n                  className={classes.button}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={submitTodoHandler}\n              >\n                  Save\n              </Button>\n          </div>\n          {/* {todos.map((todo) => <div>{todo.text}</div>\n\n          )} */}\n      </Paper>\n    </Grid>  \n  );\n};\nexport default AddTask;\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":25},{"ruleId":"52","severity":1,"message":"56","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":12},{"ruleId":"52","severity":1,"message":"57","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":14},{"ruleId":"52","severity":1,"message":"58","line":6,"column":8,"nodeType":"54","messageId":"55","endLine":6,"endColumn":14},{"ruleId":"52","severity":1,"message":"59","line":10,"column":10,"nodeType":"54","messageId":"55","endLine":10,"endColumn":14},{"ruleId":"52","severity":1,"message":"60","line":10,"column":15,"nodeType":"54","messageId":"55","endLine":10,"endColumn":22},{"ruleId":"61","severity":1,"message":"62","line":1,"column":1,"nodeType":"63","messageId":"64","endLine":1,"endColumn":14,"fix":"65"},{"ruleId":"52","severity":1,"message":"66","line":2,"column":14,"nodeType":"54","messageId":"55","endLine":2,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":2,"column":17,"nodeType":"54","messageId":"55","endLine":2,"endColumn":25},{"ruleId":"52","severity":1,"message":"67","line":4,"column":34,"nodeType":"54","messageId":"55","endLine":4,"endColumn":40},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'Header' is defined but never used.","'server' is defined but never used.","'todo' is assigned a value but never used.","'setTodo' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"70","text":"71"},"'CardHeader' is defined but never used.","'colors' is defined but never used.","no-global-assign","no-unsafe-negation",[0,13],""]